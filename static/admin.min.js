// Change dark mode

const body = $("body");
const modeToggle = $(".mode-toggle");

let getMode = localStorage.getItem("mode");
if (getMode && getMode === "dark") {
  body.toggleClass("dark");
}

modeToggle.on("click", () => {
  body.toggleClass("dark");
  if (body.hasClass("dark")) {
    localStorage.setItem("mode", "dark");
  } else {
    localStorage.setItem("mode", "light");
  }
});

// collapse sidenav
const sidebar = $("nav");
const sidebarToggle = $(".sidebar-toggle");
sidebarToggle.on("click", () => {
  if (sidebar.hasClass("close")) {
    sidebar.removeClass("close");
  } else {
    sidebar.addClass("close");
  }
});
function cancelOrder(orderId, isPaid, isCancelled) {
  if (isPaid === "True") {
    Swal.fire({
      icon: "info",
      title: "Đơn hàng đã thanh toán không thể hủy.",
      showConfirmButton: false,
      timer: 3000,
    });
    return;
  }
  if (isCancelled === "True") {
    Swal.fire({
      icon: "info",
      title: "Đơn hàng này đã được hủy.",
      showConfirmButton: false,
      timer: 3000,
    });
    return;
  }
  Swal.fire({
    title: "Bạn có chắc chắn muốn hủy đơn hàng này không?",
    icon: "warning",
    showCancelButton: true,
    confirmButtonColor: "#3085d6",
    cancelButtonColor: "#d33",
    confirmButtonText: "Có!",
    cancelButtonText: "Không",
  }).then((result) => {
    if (result.isConfirmed) {
      const csrftoken = getCookie("csrftoken");

      fetch(`/admin/order/cancel_order/${orderId}/`, {
        method: "POST",
        headers: {
          "X-CSRFToken": csrftoken,
          "Content-Type": "application/json",
          "X-Requested-With": "XMLHttpRequest",
        },
        body: JSON.stringify({}),
      })
        .then((response) => {
          if (response.ok) {
            Swal.fire(
              "Đã hủy!",
              "Đơn hàng của bạn đã được hủy.",
              "success"
            ).then(() => {
              location.reload();
            });
          } else {
            Swal.fire("Lỗi!", "Không thể hủy đơn hàng.", "error");
          }
        })
        .catch((error) => {
          console.error("Error:", error);
          Swal.fire("Lỗi!", "Đã xảy ra lỗi khi hủy đơn hàng.", "error");
        });
    }
  });
}
function confirmPaymentOrder(orderId, isPaid) {
  if (isPaid === "True") {
    Swal.fire({
      icon: "info",
      title: "Đơn hàng này đã được thanh toán.",
      showConfirmButton: false,
      timer: 3000,
    });
    return;
  }
  Swal.fire({
    title: "Bạn có chắc chắn muốn xác nhận đơn hàng này không?",
    icon: "warning",
    showCancelButton: true,
    confirmButtonColor: "#3085d6",
    cancelButtonColor: "#d33",
    confirmButtonText: "Có!",
    cancelButtonText: "Không",
  }).then((result) => {
    if (result.isConfirmed) {
      const csrftoken = getCookie("csrftoken");

      fetch(`/admin/order/confirm-payment/${orderId}/`, {
        method: "POST",
        headers: {
          "X-CSRFToken": csrftoken,
          "Content-Type": "application/json",
          "X-Requested-With": "XMLHttpRequest",
        },
        body: JSON.stringify({}),
      })
        .then((response) => {
          if (response.ok) {
            Swal.fire(
              "Đã xác nhận!",
              "Đơn hàng này đã được xác nhận.",
              "success"
            ).then(() => {
              location.reload();
            });
          } else {
            Swal.fire("Lỗi!", "Không thể xác nhận đơn hàng.", "error");
          }
        })
        .catch((error) => {
          console.error("Error:", error);
          Swal.fire("Lỗi!", "Đã xảy ra lỗi khi xác nhận đơn hàng.", "error");
        });
    }
  });
}
function loadOrderDetails(orderId) {
  const csrftoken = getCookie("csrftoken");
  var myModal = new bootstrap.Modal(
    document.getElementById("orderDetailModal")
  );
  myModal.show();
  fetch(`/admin/order/details/${orderId}`, {
    method: "GET",
    headers: {
      "X-CSRFToken": csrftoken,
      "Content-Type": "application/json",
      "X-Requested-With": "XMLHttpRequest",
    },
  })
    .then((response) => response.json())
    .then((data) => {
      if (data.error) {
        console.error(data.error);
        return;
      }
      $("#orderId").val(data.id);
      $("#customer").val(data.UserID);
      $("#totalAmount").val(data.TotalAmount.toLocaleString() + " đ");
      $("#orderDate").val(data.OrderDate);
      $("#isPaid").val(data.IsPaid + "");
      $("#isCancelled").val(data.IsCancelled + "");
      document.getElementById("order-details").innerHTML = `
      <table class="table table-bordered table-striped">
      <thead>
          <tr>
              <th>ID</th>
              <th>Phụ kiện</th>
              <th>Hình ảnh</th>
              <th>Số lượng </th>
              <th>Đơn giá </th>
              <th>Thành tiền </th>
          </tr>
      </thead>
      <tbody id="product-table-body">
          ${data.order_details.map(
            (detail) => `
              <tr>
                <td>${detail.id}</td>
                <td class="text-start td-img">
                    <a class="text-black text-decoration-none" href="/product_detail/${
                      detail.AccessoryID.id
                    }/"
                        data-bs-toggle="tooltip"
                        title="${detail.AccessoryID.Name}"
                        target="_blank">
                        ${detail.AccessoryID.Name}
                    </a>
                </td>
                <td>
                    <div style="width: 120px; height: 160px;">
                        <img class="w-100 h-100" id="product-image"
                            src="/static/images/product/${
                              detail.AccessoryID.Image
                            }"
                            alt="/static/images/product/${
                              detail.AccessoryID.Image
                            }">
                    </div>
                </td>
                <td>${detail.Quantity}</td>
                <td style="text-wrap: nowrap;">${
                  detail.UnitPrice.toLocaleString() + " đ"
                }</td>
                <td style="text-wrap: nowrap;">${
                  (detail.UnitPrice * detail.Quantity).toLocaleString() + " đ"
                }</td>
              </tr>`
          )}
      </tbody>
  </table>
      `;
    })
    .catch((error) => {
      console.error("Error fetching order:", error);
    });
}
function updateOrder() {
  const orderId = $("#orderId").val();
  const isPaid = $("#isPaid").val();
  const isCancelled = $("#isCancelled").val();
  fetch(`/admin/order/update/${orderId}/`, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      "X-CSRFToken": getCookie("csrftoken"),
    },
    body: JSON.stringify({
      isPaid: isPaid,
      isCancelled: isCancelled,
    }),
  })
    .then((response) => response.json())
    .then((data) => {
      if (data.success) {
        Swal.fire({
          icon: "info",
          title: "Cập nhật thành công.",
          showConfirmButton: false,
          timer: 2000,
        });
        setTimeout(() => {
          location.reload();
        }, 2000);
      } else {
        Swal.fire({
          icon: "warning",
          title: "Cập nhật thất bại.",
          showConfirmButton: false,
          timer: 3000,
        });
      }
    })
    .catch((error) => {
      console.error("Error:", error);
    });
}
// Function to get CSRF token from cookie
function getCookie(name) {
  let cookieValue = null;
  if (document.cookie && document.cookie !== "") {
    const cookies = document.cookie.split(";");
    for (let i = 0; i < cookies.length; i++) {
      const cookie = cookies[i].trim();
      if (cookie.substring(0, name.length + 1) === name + "=") {
        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
        break;
      }
    }
  }
  return cookieValue;
}
